type Book {
  id: ID!
  title: String!
  programCode: String
  classCode: String
  posts(filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection
}

type Post {
  id: ID!
  title: String!
  ownerID: String!
  description: String
  book: Book
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelBookConnection {
  items: [Book]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelBookFilterInput {
  id: ModelIDFilterInput
  title: ModelStringFilterInput
  programCode: ModelStringFilterInput
  classCode: ModelStringFilterInput
  and: [ModelBookFilterInput]
  or: [ModelBookFilterInput]
  not: ModelBookFilterInput
}

type Query {
  getBook(id: ID!): Book
  listBooks(filter: ModelBookFilterInput, limit: Int, nextToken: String): ModelBookConnection
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
}

input CreateBookInput {
  id: ID
  title: String!
  programCode: String
  classCode: String
}

input UpdateBookInput {
  id: ID!
  title: String
  programCode: String
  classCode: String
}

input DeleteBookInput {
  id: ID
}

type Mutation {
  createBook(input: CreateBookInput!): Book
  updateBook(input: UpdateBookInput!): Book
  deleteBook(input: DeleteBookInput!): Book
  createPost(input: CreatePostInput!): Post
  updatePost(input: UpdatePostInput!): Post
  deletePost(input: DeletePostInput!): Post
}

type Subscription {
  onCreateBook: Book @aws_subscribe(mutations: ["createBook"])
  onUpdateBook: Book @aws_subscribe(mutations: ["updateBook"])
  onDeleteBook: Book @aws_subscribe(mutations: ["deleteBook"])
  onCreatePost: Post @aws_subscribe(mutations: ["createPost"])
  onUpdatePost: Post @aws_subscribe(mutations: ["updatePost"])
  onDeletePost: Post @aws_subscribe(mutations: ["deletePost"])
}

type ModelPostConnection {
  items: [Post]
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelIDFilterInput
  title: ModelStringFilterInput
  ownerID: ModelStringFilterInput
  description: ModelStringFilterInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

input CreatePostInput {
  id: ID
  title: String!
  ownerID: String!
  description: String
  postBookId: ID
}

input UpdatePostInput {
  id: ID!
  title: String
  ownerID: String
  description: String
  postBookId: ID
}

input DeletePostInput {
  id: ID
}
